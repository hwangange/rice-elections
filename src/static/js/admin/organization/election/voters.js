// Generated by CoffeeScript 1.4.0
var ListModal, Page,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

jQuery(function() {
  var addModal, deleteModal, page;
  addModal = new ListModal('add');
  deleteModal = new ListModal('delete');
  return page = new Page();
});

Page = (function() {

  function Page() {
    this.updateVoterList = __bind(this.updateVoterList, this);

  }

  Page.prototype.updateVoterList = function(list) {
    return console.log(list);
  };

  return Page;

})();

ListModal = (function() {

  function ListModal(type) {
    this.type = type;
    this.getList = __bind(this.getList, this);

    this.reset = __bind(this.reset, this);

    this.submit = __bind(this.submit, this);

    this.type = type;
    this.input = $("#net-ids-" + this.type);
    $("#voters-" + this.type + "-submit").click(this.submit);
  }

  ListModal.prototype.submit = function(e) {
    var data, list,
      _this = this;
    list = this.getList();
    if (list === null) {
      return;
    }
    data = {
      'method': "" + this.type + "_voters",
      'voters': list
    };
    return $.ajax({
      url: '/admin/organization/election/voters',
      type: 'POST',
      data: {
        'data': JSON.stringify(data)
      },
      success: function(data) {
        var response;
        response = JSON.parse(data);
        if (response['status'] === 'OK') {
          $("modal-" + _this.type).modal('hide');
          console.log('Success!');
          return _this.reset();
        } else if (response['status'] === 'ERROR') {
          return console.log("ERROR: " + response['msg']);
        }
      }
    });
  };

  ListModal.prototype.reset = function() {
    var inputContainer;
    this.input.val('');
    inputContainer = this.input.parent().parent();
    inputContainer.removeClass('error');
    return inputContainer.children().children().filter('.help-inline').remove();
  };

  ListModal.prototype.getList = function() {
    var error, inputContainer, list, netId, _i, _len, _ref;
    inputContainer = this.input.parent().parent();
    list = [];
    _ref = this.input.val().split(',');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      netId = _ref[_i];
      if (netId.trim()) {
        list.push(netId.trim());
      }
    }
    if (list.length === 0) {
      inputContainer.addClass('error');
      error = $("<span class='help-inline'>Missing information.</span>");
      error.insertAfter(this.input);
      return null;
    } else {
      inputContainer.removeClass('error');
      inputContainer.children().children().filter('.help-inline').remove();
      return list;
    }
  };

  return ListModal;

})();
