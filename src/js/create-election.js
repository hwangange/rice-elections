// Generated by CoffeeScript 1.4.0
(function() {
  var CumulativeVotingPosition, RankedVotingPosition, addPositionModal, all_positions, currentModal, displayPosition, getElectionName, getElectionTimes, getEligibleVoters, getPositions, getResultDelay, position, positionModal, scrollToTop, submitForm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    $('#startDate, #endDate').parent().datepicker();
    $('#startTime, #endTime').timepicker({
      minuteStep: 5
    });
    $('label[rel="tooltip"]').tooltip();
    $('#election-submit').click(submitForm);
    return $('#createForm').bind('reset', function() {
      var all_positions;
      currentModal.resetForm();
      all_positions = [];
      return $('#positions-list').children().remove();
    });
  });

  all_positions = [];

  submitForm = function() {
    var formData, postData, valid;
    if ($('#election-submit').hasClass('disabled')) {
      return false;
    }
    getElectionName();
    getElectionTimes();
    valid = true;
    formData = [getElectionName(), getElectionTimes(), getEligibleVoters(), getPositions(), getResultDelay()];
    $.each(formData, function(index, value) {
      if (!value) {
        return valid = false;
      }
    });
    if (!valid) {
      scrollToTop();
      return false;
    }
    postData = {
      'name': formData[0],
      'start': formData[1]['start'],
      'end': formData[1]['end'],
      'voters': formData[2],
      'positions': formData[3],
      'result_delay': formData[4]
    };
    return $.ajax({
      url: '/create-election',
      type: 'POST',
      data: {
        'formData': JSON.stringify(postData)
      },
      success: function(data) {
        var response;
        response = JSON.parse(data);
        scrollToTop();
        $('#server-response').addClass('alert');
        if (response['status'] === 'OK') {
          $('#server-response').addClass('alert-success');
        } else {
          $('#server-response').addClass('alert-error');
        }
        $('#server-response').html(response['msg']);
        return $('#server-response').hide().slideDown(1000);
      }
    });
  };

  scrollToTop = function() {
    return $('html, body').animate({
      scrollTop: $('#createForm').offset().top
    }, 500);
  };

  getElectionName = function() {
    var name, nameContainer;
    name = $('#name');
    nameContainer = name.parent().parent();
    nameContainer.removeClass('error');
    $('.errorMsgName').remove();
    if (!name.val()) {
      nameContainer.addClass('error');
      $("<span class='help-inline errorMsgName'>Please enter election " + "name.</span>").insertAfter(name);
      return null;
    }
    return name.val();
  };

  getElectionTimes = function() {
    var end, endDate, endTime, errorMsg, field, start, startDate, startTime, timeContainer, _i, _len, _ref;
    startDate = $('#startDate');
    startTime = $('#startTime');
    endDate = $('#endDate');
    endTime = $('#endTime');
    timeContainer = startDate.parent().parent().parent();
    errorMsg = '';
    _ref = [startDate, startTime, endDate, endTime];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      if (!field.val()) {
        errorMsg = 'Missing information.';
      }
    }
    if (!errorMsg) {
      start = new Date("" + (startDate.val()) + " " + (startTime.val())).getTime();
      end = new Date("" + (endDate.val()) + " " + (endTime.val())).getTime();
      start /= 1000;
      end /= 1000;
      if (start > end) {
        errorMsg = 'Start time is later than end time.';
      }
      if (start === end) {
        errorMsg = 'Start time is the same as end time.';
      }
    }
    if (errorMsg) {
      timeContainer.addClass('error');
      $('.errorMsgTime').remove();
      startDate.parent().parent().append("<span class='help-inline " + ("errorMsgTime'>" + errorMsg + "</span>"));
      return null;
    } else {
      timeContainer.removeClass('error');
      $('.errorMsgTime').remove();
      return {
        'start': start,
        'end': end
      };
    }
  };

  getResultDelay = function() {
    return parseInt($('#result-delay').val());
  };

  getEligibleVoters = function() {
    var voter, voters, votersContainer, votersList, _i, _len, _ref;
    voters = $('#eligible-voters');
    votersContainer = voters.parent().parent();
    votersList = [];
    _ref = voters.val().split(',');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      voter = _ref[_i];
      if (voter.trim()) {
        votersList.push(voter.trim());
      }
    }
    votersContainer.removeClass('error');
    $('.errorMsgEligibleVoters').remove();
    if (votersList.length === 0) {
      votersContainer.addClass('error');
      $("<span class='help-inline errorMsgEligibleVoters'>Missing " + "information.</span>").insertAfter(voters);
      return null;
    }
    return votersList;
  };

  getPositions = function() {
    var pos, posContainer;
    pos = $('#positions-list');
    posContainer = pos.parent().parent();
    posContainer.removeClass('error');
    $('.errorMsgPositions').remove();
    if (!all_positions) {
      posContainer.addClass('error');
      $("<span class='help-inline errorMsgPositions'>Need at least one " + "position.</span>").insertAfter(pos);
      return null;
    }
    return all_positions;
  };

  displayPosition = function(position) {
    var candidate, html, newPos, _i, _len, _ref;
    html = ("<div style='margin: 5px 0 5px;'><strong>" + position['type'] + ": ") + ("</strong>" + position['name'] + "<br /><ul>");
    _ref = position['candidates'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      html += "<li>" + candidate['name'] + " = " + candidate['netId'] + "</li>";
    }
    if (position['vote_required']) {
      html += "<li><em>Vote required</em></li>";
    }
    html += "</ul>";
    newPos = $(html);
    $('#positions-list').append(newPos);
    return newPos.hide().slideDown(1000);
  };

  position = (function() {
    var addCandidate, addCandidateHandler, candidateIDGen, candidateIDPrefix, candidateIDs, candidates, getName, name, type;

    type = null;

    name = null;

    candidateIDs = null;

    candidateIDGen = null;

    candidateIDPrefix = null;

    addCandidate = null;

    candidates = null;

    function position(posType) {
      type = posType;
      console.log("Binding type to " + posType);
      console.log("Result is " + type);
      name = $("#position-" + posType + "-name");
      candidateIDs = [];
      candidateIDPrefix = "position-" + posType + "-candidate-";
      addCandidate = $("#position-" + posType + "-add-candidate");
      candidates = $("#position-" + posType + "-candidates");
      addCandidate.click(addCandidateHandler);
    }

    addCandidateHandler = function() {
      var candidateInput, id, index;
      console.log("What's my name? " + type);
      index = candidateIDGen++;
      id = candidateIDPrefix + index;
      candidateInput = $('<div/>', {
        "class": 'input-append'
      }).append($('<input>', {
        type: 'text',
        "class": 'input-xlarge, input-margin-right',
        id: "" + type + "-" + id + "-name",
        name: "" + type + "-" + id + "-name",
        width: '200px',
        placeholder: 'Full Name'
      })).append($('<input>', {
        type: 'text',
        "class": 'input-xlarge',
        id: "" + type + "-" + id + "-net-id",
        name: "" + type + "-" + id + "-net-id",
        width: '50px',
        placeholder: 'NetID'
      })).append($('<span/>', {
        "class": 'add-on',
        id: "" + type + "-" + id
      }).append($('<i/>', {
        "class": 'icon-remove'
      })));
      candidates.append(candidateInput);
      candidateInput.hide().fadeIn(500);
      candidateIDs.push(index);
      return $("#" + this.type + "-" + id).click(function() {
        var indexPtr;
        indexPtr = candidateIDs.indexOf(index);
        if (indexPtr !== -1) {
          candidateIDs.splice(indexPtr, 1);
        }
        return $(this).parent().fadeOut(500);
      });
    };

    position.prototype.reset = function() {
      throw new Error("Not implemented.");
    };

    getName = function() {
      var nameContainer;
      nameContainer = name.parent().parent();
      nameContainer.removeClass('error');
      $('.errorMsgPositionName').remove();
      if (!name.val()) {
        nameContainer.addClass('error');
        $('<span class="help-inline errorMsgPositionName">Missing ' + 'information.</span>').insertAfter(name);
        return null;
      }
      return name.val();
    };

    return position;

  })();

  RankedVotingPosition = (function(_super) {

    __extends(RankedVotingPosition, _super);

    console.log("Constructing ranked code");

    function RankedVotingPosition() {
      console.log("Constructing ranked position");
      RankedVotingPosition.__super__.constructor.call(this, "ranked");
    }

    return RankedVotingPosition;

  })(position);

  CumulativeVotingPosition = (function(_super) {

    __extends(CumulativeVotingPosition, _super);

    console.log("Running cumulative code");

    function CumulativeVotingPosition() {
      console.log("Constructing cumulative position");
      CumulativeVotingPosition.__super__.constructor.call(this, "cumulative");
    }

    return CumulativeVotingPosition;

  })(position);

  addPositionModal = (function() {
    var cumulativeVoting, cumulativeVotingPosition, positionSelected, rankedChoice, rankedVotingPosition, selectType, selectionContent;

    function addPositionModal() {}

    selectType = $("#position-select-type");

    selectionContent = $(".selection-content");

    rankedChoice = $("#ranked-choice");

    cumulativeVoting = $("#cumulative-voting");

    rankedVotingPosition = new RankedVotingPosition();

    cumulativeVotingPosition = new CumulativeVotingPosition();

    positionSelected = rankedVotingPosition;

    addPositionModal.prototype.resetModal = function() {
      return selectType.val('0').change();
    };

    selectType.change(function() {
      var selectionId;
      selectionContent.hide();
      selectionId = $(this).val();
      return $("#" + selectionId).show();
    });

    return addPositionModal;

  })();

  positionModal = (function() {
    var addCandidate, addSubmit, candidateIDGen, candidateIDPrefix, candidateIDs, candidates, cumulativeVoting, getCandidates, getName, getSlots, getType, hasVoteRequirement, hasWriteIn, name, rankedChoice, selectType, selectionContent, slots, voteRequired, writeIn,
      _this = this;

    function positionModal() {}

    candidateIDs = [];

    candidateIDGen = 0;

    candidateIDPrefix = 'position-candidate-';

    selectType = $('#position-select-type');

    selectionContent = $('.selection-content');

    rankedChoice = $('#ranked-choice');

    cumulativeVoting = $('#cumulative-voting');

    name = $('#position-name');

    slots = $('#position-slots');

    addCandidate = $('#position-add-candidate');

    candidates = $('#position-candidates');

    writeIn = $('#position-write-in');

    voteRequired = $('#position-required');

    addSubmit = $('#position-add-submit');

    positionModal.prototype.resetForm = function() {
      selectType.val('0').change();
      candidateIDs = [];
      candidates.children().remove();
      slots.val('1').change();
      name.val('').change();
      writeIn.attr('checked', false);
      return voteRequired.attr('checked', false);
    };

    selectType.change(function() {
      selectionContent.hide();
      return $("#" + ($(this).val())).show();
    });

    addCandidate.click(function() {
      var candidateInput, id, index;
      index = candidateIDGen++;
      id = candidateIDPrefix + index;
      candidateInput = $('<div/>', {
        "class": 'input-append'
      }).append($('<input>', {
        type: 'text',
        "class": 'input-xlarge, input-margin-right',
        id: "" + id + "-name",
        name: "" + id + "-name",
        width: '200px',
        placeholder: 'Full Name'
      })).append($('<input>', {
        type: 'text',
        "class": 'input-xlarge',
        id: "" + id + "-net-id",
        name: "" + id + "-net-id",
        width: '50px',
        placeholder: 'NetID'
      })).append($('<span/>', {
        "class": 'add-on',
        id: id
      }).append($('<i/>', {
        "class": 'icon-remove'
      })));
      candidates.append(candidateInput);
      candidateInput.hide().fadeIn(500);
      candidateIDs.push(index);
      return $("#" + id).click(function() {
        var indexPtr;
        indexPtr = candidateIDs.indexOf(index);
        if (indexPtr !== -1) {
          candidateIDs.splice(indexPtr, 1);
        }
        return $(this).parent().fadeOut(500);
      });
    });

    getType = function() {
      if (rankedChoice.attr('selected') === 'selected') {
        return 'Ranked-Choice';
      }
      if (rankedChoice.attr('selected') === 'selected') {
        return 'Cumulative-Voting';
      }
    };

    getName = function() {
      var nameContainer;
      nameContainer = name.parent().parent();
      nameContainer.removeClass('error');
      $('.errorMsgPositionName').remove();
      if (!name.val()) {
        nameContainer.addClass('error');
        $('<span class="help-inline errorMsgPositionName">Missing ' + 'information.</span>').insertAfter(name);
        return null;
      }
      return name.val();
    };

    getSlots = function() {
      var max, min, slotsContainer, val;
      slotsContainer = slots.parent().parent();
      val = parseInt(slots.val());
      min = parseInt(slots.attr('min'));
      max = parseInt(slots.attr('max'));
      slotsContainer.removeClass('error');
      $('.errorMsgSlots').remove();
      if (!(min <= val && val <= max)) {
        slotsContainer.addClass('error');
        $('<span class="help-inline errorMsgSlots">Out of valid range.' + '</span>').insertAfter(slots);
        return null;
      } else if (val > candidateIDs.length && !hasWriteIn()) {
        slotsContainer.addClass('error');
        $('<span class="help-inline errorMsgSlots">Number of ' + 'slots exceed number of candidates.</span>').insertAfter(slots);
        return null;
      }
      return val;
    };

    getCandidates = function() {
      var can, canList, container, missing, nameInput, netIdInput, _i, _len;
      missing = false;
      container = candidates.parent().parent();
      canList = [];
      for (_i = 0, _len = candidateIDs.length; _i < _len; _i++) {
        can = candidateIDs[_i];
        nameInput = $("#position-candidate-" + can + "-name");
        netIdInput = $("#position-candidate-" + can + "-net-id");
        if (nameInput.val() === '' || netIdInput.val() === '') {
          missing = true;
        } else {
          canList.push({
            'name': nameInput.val(),
            'netId': netIdInput.val()
          });
        }
      }
      $('.errorMsgCandidateName').remove();
      container.removeClass('error');
      if (missing) {
        container.addClass('error');
        $('<span class="help-inline errorMsgSlots">Number of ' + 'Missing information.</span>').insertAfter(candidates);
        return null;
      }
      return canList;
    };

    hasWriteIn = function() {
      if (writeIn.attr('checked') === 'checked') {
        return true;
      }
    };

    hasVoteRequirement = function() {
      if (voteRequired.attr('checked') === 'checked') {
        return true;
      }
    };

    addSubmit.click(function(e) {
      var key, value;
      console.log('Submit clicked');
      position = {
        'type': getType(),
        'name': getName(),
        'slots': getSlots(),
        'candidates': getCandidates(),
        'write_in': hasWriteIn(),
        'vote_required': hasVoteRequirement()
      };
      for (key in position) {
        value = position[key];
        if (value === null) {
          return false;
        }
      }
      all_positions.push(position);
      displayPosition(position);
      $('#addPositions').modal('hide');
      return currentModal.resetForm();
    });

    return positionModal;

  }).call(this);

  currentModal = new addPositionModal();

}).call(this);
