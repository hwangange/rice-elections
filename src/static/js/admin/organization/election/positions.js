// Generated by CoffeeScript 1.4.0
var CumulativeVotingPosition, Form, Position, RankedVotingPosition, all_positions, cumulativeModal, form, rankedModal;

all_positions = [];

rankedModal = null;

cumulativeModal = null;

form = null;

jQuery(function() {
  var json;
  rankedModal = new RankedVotingPosition();
  cumulativeModal = new CumulativeVotingPosition();
  form = new Form();
  return json = {
    'entityId': 'diwEVwjioxcWEq',
    'write_in': 4,
    'vote_required': true,
    'name': 'Hello!',
    'candidates': ['CanA', 'CanB', 'CanC']
  };
});

Form = function() {
  var createPositionHTML;
  this.positions = [];
  Form.prototype.processPosition = function(position) {
    if (!position['pageId']) {
      position['pageId'] = this.positions.length;
    }
    this.positions[position['pageId']] = position;
    return createPositionHTML(position);
  };
  createPositionHTML = function(position) {
    var html, id;
    id = position['pageId'];
    html = $("        <tr id='position-" + id + "' style='padding-bottom:5px;'>            <td>                <i class='icon-user'></i> " + position['name'] + "            </td>            <td>                <a href='#' id='position-" + id + "-edit'>Edit</a> &middot;                <a href='#' class='delete-position' id='position-" + id + "-delete'>Delete</a>            </td>        </tr>        ");
    $('#positions').append(html);
    $('#no-positions').hide();
    return html.hide().slideDown(500);
  };
};

Position = function(type) {
  var self,
    _this = this;
  self = this;
  this.pageId = null;
  this.entityId = null;
  this.type = type;
  this.candidateIDGen = 0;
  this.candidateIDs = [];
  this.candidateIDPrefix = "position-" + this.type + "-candidate-";
  this.addCandidate = $("#position-" + this.type + "-add-candidate");
  this.candidates = $("#position-" + this.type + "-candidates");
  this.name = $("#position-" + this.type + "-name");
  this.writeInSlots = $("#position-" + this.type + "-write-in");
  this.voteRequired = $("#position-" + this.type + "-required");
  this.submit = $("#modal-" + this.type + "-submit");
  this.toJson = function() {
    var position;
    position = {
      'pageId': _this.pageId,
      'entityId': _this.entityId
    };
    return position;
  };
  this.reset = function() {
    _this.candidateIDs = [];
    _this.candidates.children().remove();
    _this.name.val('').change();
    return _this.voteRequired.attr('checked', false);
  };
  this.submit.click(function(e) {
    var json;
    json = _this.toJson();
    if (json === null) {
      return false;
    }
    $("#modal-" + _this.type).modal('hide');
    _this.reset();
    return form.processPosition(json);
  });
  this.resetSubmitBtn = function() {
    var text;
    text = 'Create Position';
    if (_this.entityId) {
      text = 'Update Position';
    }
    _this.setSubmitBtn('btn-primary', text);
    return _this.submit.removeClass('disabled');
  };
  this.setSubmitBtn = function(type, text) {
    _this.restoreDefaultButtonState();
    _this.submit.addClass(type);
    return _this.submit.text(text);
  };
  this.restoreDefaultButtonState = function() {
    var cl, _i, _len, _ref, _results;
    _ref = ['btn-success', 'btn-danger', 'btn-primary'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cl = _ref[_i];
      _results.push(_this.submit.removeClass(cl));
    }
    return _results;
  };
  this.setFromJson = function(json) {
    var candidate, id, index, _i, _len, _ref;
    if (!json) {
      return;
    }
    _this.reset();
    _this.entityId = json['entityId'];
    _this.pageId = json['pageId'];
    _this.writeInSlots.val(json['write_in']);
    _this.voteRequired.attr('checked', json['vote_required']);
    _this.name.val(json['name']);
    _ref = json['candidates'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      candidate = _ref[_i];
      _this.addCandidateSlot();
      index = _this.candidateIDGen - 1;
      id = _this.candidateIDPrefix + index;
      $("#" + id + "-name").val(candidate);
      console.log("" + id + "-name");
      console.log(candidate);
    }
    return _this.resetSubmitBtn();
  };
  this.addCandidateSlot = function() {
    var candidateInput, id, index;
    index = _this.candidateIDGen++;
    id = _this.candidateIDPrefix + index;
    candidateInput = $('<div/>', {
      "class": 'input-append'
    }).append($('<input>', {
      type: 'text',
      "class": 'input-xlarge, input-margin-right',
      id: "" + id + "-name",
      name: "" + id + "-name",
      width: '200px',
      placeholder: 'Full Name'
    })).append($('<span/>', {
      "class": 'add-on',
      id: "" + id
    }).append($('<i/>', {
      "class": 'icon-remove'
    })));
    _this.candidates.append(candidateInput);
    candidateInput.hide().fadeIn(500);
    _this.candidateIDs.push(index);
    return $("#" + id).click(function() {
      var indexPtr;
      indexPtr = this.candidateIDs.indexOf(index);
      if (indexPtr !== -1) {
        this.candidateIDs.splice(indexPtr, 1);
      }
      return $(this).parent().fadeOut(500);
    });
  };
  this.addCandidate.click(this.addCandidateSlot);
  Position.prototype.getName = function() {
    var nameContainer;
    nameContainer = this.name.parent().parent();
    nameContainer.removeClass('error');
    $('.errorMsgPositionName').remove();
    if (!this.name.val()) {
      nameContainer.addClass('error');
      $('<span class="help-inline errorMsgPositionName">Missing ' + 'information.</span>').insertAfter(this.name);
      return null;
    }
    return this.name.val();
  };
  Position.prototype.getCandidates = function() {
    var can, canList, container, missing, nameInput, _i, _len, _ref;
    missing = false;
    container = this.candidates.parent().parent();
    canList = [];
    _ref = this.candidateIDs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      can = _ref[_i];
      nameInput = $("#position-" + this.type + "-candidate-" + can + "-name");
      if (nameInput.val() === '') {
        missing = true;
      } else {
        canList.push(nameInput.val());
      }
    }
    $('.errorMsgCandidateName').remove();
    container.removeClass('error');
    if (missing) {
      container.addClass('error');
      $('<span class="help-inline errorMsgSlots">Number of ' + 'Missing information.</span>').insertAfter(this.candidates);
      return null;
    }
    return canList;
  };
  Position.prototype.getWriteInSlots = function() {
    var max, min, slotsContainer, val;
    slotsContainer = this.writeInSlots.parent().parent();
    val = parseInt(this.writeInSlots.val());
    min = parseInt(this.writeInSlots.attr('min'));
    max = parseInt(this.writeInSlots.attr('max'));
    slotsContainer.removeClass('error');
    $('.errorMsgWSlots').remove();
    if (!(min <= val && val <= max)) {
      slotsContainer.addClass('error');
      $('<span class="help-inline errorMsgWSlots">Out of valid range.' + '</span>').insertAfter(this.writeInSlots);
      return null;
    }
    if (this.candidateIDs.length === 0 && val === 0) {
      slotsContainer.addClass('error');
      $('<span class="help-inline errorMsgWSlots">Must have atleast a ' + 'single write in slot if no candidates are specified.' + '</span>').insertAfter(this.writeInSlots);
      return null;
    }
    return val;
  };
  Position.prototype.hasVoteRequirement = function() {
    return this.voteRequired.attr('checked') === 'checked';
  };
};

RankedVotingPosition = function() {
  Position.call(this, "ranked");
  RankedVotingPosition.prototype.toJson = function() {
    var json, key, position, value;
    position = Position.prototype.toJson.call(this);
    json = {
      'type': 'Ranked-Choice',
      'name': this.getName(),
      'candidates': this.getCandidates(),
      'write_in': this.getWriteInSlots(),
      'vote_required': this.hasVoteRequirement()
    };
    for (key in json) {
      value = json[key];
      if (value === null) {
        return null;
      }
      position[key] = value;
    }
    return position;
  };
};

RankedVotingPosition.prototype = new Position;

RankedVotingPosition.prototype.constructor = RankedVotingPosition;

CumulativeVotingPosition = function() {
  var self;
  Position.call(this, "cumulative");
  self = this;
  this.points = $('#position-cumulative-points');
  this.slots = $('#position-cumulative-slots');
  CumulativeVotingPosition.prototype.getPoints = function() {
    var max, min, pointsContainer, val;
    pointsContainer = this.points.parent().parent();
    val = parseInt(this.points.val());
    min = parseInt(this.points.attr('min'));
    max = parseInt(this.points.attr('max'));
    pointsContainer.removeClass('error');
    $('.errorMsgPoints').remove();
    if (!(min <= val && val <= max)) {
      pointsContainer.addClass('error');
      $('<span class="help-inline errorMsgPoints">Out of valid range.' + '</span>').insertAfter(this.points);
      return null;
    }
    return val;
  };
  CumulativeVotingPosition.prototype.getSlots = function() {
    var max, min, slotsContainer, val;
    slotsContainer = this.slots.parent().parent();
    val = parseInt(this.slots.val());
    min = parseInt(this.slots.attr('min'));
    max = parseInt(this.slots.attr('max'));
    slotsContainer.removeClass('error');
    $('.errorMsgPSlots').remove();
    if (!(min <= val && val <= max)) {
      slotsContainer.addClass('error');
      $('<span class="help-inline errorMsgPSlots">Out of valid range.' + '</span>').insertAfter(this.slots);
      return null;
    } else if (val > this.candidateIDs.length && this.getWriteInSlots() < 1) {
      slotsContainer.addClass('error');
      $('<span class="help-inline errorMsgPSlots">Number of ' + 'slots exceed number of candidates.</span>').insertAfter(this.slots);
      return null;
    }
    return val;
  };
  CumulativeVotingPosition.prototype.reset = function() {
    Position.prototype.reset.call(this);
    return this.slots.val('1').change();
  };
  CumulativeVotingPosition.prototype.toJson = function() {
    var json, key, position, value;
    position = Position.prototype.toJson.call(this);
    json = {
      'type': 'Cumulative-Voting',
      'name': this.getName(),
      'candidates': this.getCandidates(),
      'write_in': this.getWriteInSlots(),
      'vote_required': this.hasVoteRequirement(),
      'slots': this.getSlots(),
      'points': this.getPoints()
    };
    for (key in json) {
      value = json[key];
      if (value === null) {
        return null;
      }
      position[key] = value;
    }
    return position;
  };
};

CumulativeVotingPosition.prototype = new Position;

CumulativeVotingPosition.prototype.constructor = CumulativeVotingPosition;
